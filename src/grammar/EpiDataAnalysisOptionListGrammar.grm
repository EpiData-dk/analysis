"Name"     = 'EpiData Option List Grammar'
"Author"   = 'Torsten Bonde Christiansen'
"Version"  = '1.0'
"About"    = 'The Grammer for independent parsing of Options'
"Case Sensitive" = 'False'
"Start Symbol" = <Option List>

! ------------------------------------------------- Sets

{ID Head}            = {Letter} + [_]
{ID Tail}            = {Alphanumeric} + [_?*]
{String Chars}       = {All Printable} + {HT} - ["]

! ------------------------------------------------- Terminals

Identifier    = '$'?{ID Head}{ID Tail}*
String        = '"' {String Chars}* '"'
Integer       = {Digit}+
Float         = {Digit}+'.'{Digit}+

! Comments
Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! Special tokens
Missing       = '.'
Pi            = 'pi'|'Ï€'
RecNumber     = '_n'

! ------------------------------------------------- Rules


!  =====================================================
!        VARIABLES
!  =====================================================

<Indexed Variable>                      ::= <Referenced Variable> '[' <Expression List> ']'
                                        |   <Referenced Variable>

<Referenced Variable>                   ::= '@' '{' <Expression> '}'
                                        |   <Variable>

<Variable>                              ::= Identifier


!  =====================================================
!        OPTIONS
!  =====================================================

<Option List>                              ::= <Option> <Option List>
                                           |

<Option>                                   ::= '!' <Indexed Variable>
                                           |   '!' <Variable> ':=' <Expression>


!  =====================================================
!        EXPRESSIONS
!  =====================================================

<Optional Expression List>                 ::= <Expression List>

<Expression List>                          ::= <Expression> ',' <Expression List>
                                           |   <Expression>

<Expression>                               ::= <Expression> '>'  <Add Exp>
                                           |   <Expression> '<'  <Add Exp>
                                           |   <Expression> '<=' <Add Exp>
                                           |   <Expression> '>=' <Add Exp>
                                           |   <Expression> '='  <Add Exp>    ! Equal
                                           |   <Expression> '<>' <Add Exp>    ! Not equal
                                           |   <Add Exp>

<Add Exp>                                  ::= <Add Exp> '+' <Mult Exp>
                                           |   <Add Exp> '-' <Mult Exp>
                                           |   <Add Exp> 'or' <Mult Exp>
                                           |   <Add Exp> 'xor' <Mult Exp>
                                           |   <Mult Exp>

<Mult Exp>                                 ::= <Mult Exp> '*' <Exponential Exp>
                                           |   <Mult Exp> '/' <Exponential Exp>
                                           |   <Mult Exp> 'div' <Exponential Exp>
                                           |   <Mult Exp> 'mod' <Exponential Exp>
                                           |   <Mult Exp> 'and' <Exponential Exp>
                                           |   <Mult Exp> 'shl' <Exponential Exp>
                                           |   <Mult Exp> 'shr' <Exponential Exp>
                                           |   <Exponential Exp>

<Exponential Exp>                          ::= <Exponential Exp> '^' <Negate Exp>
                                           |   <Negate Exp>

<Negate Exp>                               ::= '-' <Negate Exp>
                                           |   'not' <Negate Exp>
                                           |   <Value>

<Value>                                    ::= <Indexed Variable>
                                           |   Integer
                                           |   Float
                                           |   String
                                           |   Missing
                                           |   Pi
                                           |   RecNumber
                                           |   'true'
                                           |   'false'
                                           |   '(' <Expression> ')'
                                           |   <Function Call>

<Function Call>                            ::= Identifier '(' <Optional Expression List> ')'
