// #2113# Testing read of csv and _n operator plus wide to long conversion

/* this sample test demonstrates our views of formulation
  J.Lauritsen - T.Christiansen Nov. 14th 2017

  we have four levels of use:
  1. Simple creation/duplication of variables
     including simple math and assigning the _n sequence to a variable
  2. creation within subgroups of observations
  3. Assignment of values based on use of functions
  4. Looping over
     4a observations by taking values from other observations
     4b observations for assignment of sequential values within observations
     4c variables, constants and structures

-------------------------------------------------------------------
  1. Simple creation/duplication of variables
     including simple math
-------------------------------------------------------------------- */

set "show info" := "off";
set "echo" := "on";

read "long-wide-v1.csv" !c;

// notice drop is now "forgiving":
drop v h h1 h2 h3  ;

// simple copy of another variable:
new var h s:= hours ;

// assign id as sequence number = observation number:
new var id i:= _n  ;

// Create a global integer "i" to use in for-loops
new global i integer;


/*  -------------------------------------------------------------------

  2. creation within subgroups of observations

-------------------------------------------------------------------- */

// implicitly those with _n > 25 gets missing
select ( _n <= 25 ) do
  new var h1 string := hours;


// check that for n = 25 there is data, but not for n=26 no data in h1

assert ( length(h1[25]) > 0) ;

list var /* h1 age */;

assert( datatype(h1) = 13) ;

? "h1 - 26 value:" + h1[26]  + " Length: " + length( h1[26] );
assert ( h1[26] = .) ;

assert( datatype(age) = 13 ) ;
? "age - 416 value:" + age[416] + " Length: " + length(h1[415]);
assert ( age[416] = .) ;


// now test with counting:

select (h1 = .)   do count;
new global c1 i:=$count;
assert ( c1 = 391) ; // correct number must be specified

// just to be sure, test whether simpel loop counter works correctly
new global counter i := 0;
for i := 1 to size(ds1) do
     counter := counter + iif((h1[i] = .),1,0);

assert (counter = c1 ) ; // since length = 0 is the same as .

select (age = .)  do count;
assert ($count = 408);


/*  -------------------------------------------------------------------

  3. Assignment of values based on use of functions

  The challenge here is that functions return "one value", not
  a "vector". A "vector" could contain all the single observations for a
  given data variable, or a sequence of numbers for a global variable

  Therefore the function needs to know which "single value" to add
  to which "single observation".

  Example used here:
  With the function pos( , ) we wish to find a slash or a plus
     (e.g. 18-24 hours  , 168+ hours)

-------------------------------------------------------------------- */

// show the data:
select (_n < 6) do list data h*;   // we look for- or + in data: ;

// strategy 1: in two steps:
new var h2 i:= pos(hours[_n], "-");
 select (h2 = 0) do h2:= pos(hours[_n], "+");

edit var h2 !label:="Value found in two steps" ;


// strategy 2: in one step via the iif(... function

new var h3 i := iif(
                  (pos(hours[_n], "-") > 0),  /* Test condition */
                  pos(hours[_n], "-"),        /* same value     */
                  pos(hours[_n], "+")         /* else           */
                   );

edit var h3 !label:="Value found by iif function" ;

// subtract one, since we do not need the sign (+ or -)
h2 := h2-1;
h3 := h3-1;

new global i integer;

for i := 1 to size( @{$dataset[1]} ) do
  assert (h3[i] = h2[i]) !q !halt;

select (_n < 6) do list data h* ;   // we found the correct position ;


// now we are ready to extract an integer from the field hours   ;

drop var h4 h5 h6;
new var h4 s;
new var h5 i;
new var h6 i;
cls;

// h5 : via string first and then integer
// h6 : directly from string to integer by h3

select (_n < 5) do list data hours h? !varn ;
  h4 := substring(hours[_n], 1, h2[_n]);
  h6 := integer(substring(hours[_n], 1, h3[_n]));
select (_n < 5) do list data hours h? !varn ;


// set "show info" := "short";
for i := 1 to 5 /* size(ds1) */ do
  begin
      h4[i] := substring(hours[i], 1, h2[i]);
    h5[i] := integer(h4[i]);
    h6[i] := integer(substring(hours[i], 1, h3[i]));
    assert( integer(h4[i]) = h6[i]) ;
    assert( (h4[i]) = string(h6[i])) ;
         ? "i = " + i +" - " + hours[i] + " -" + h4[i] +" -" + h5[i] +" -" + h6[i] ;
         ? "."      ;
  end;
// compare the two ways to find the correct length of the initial integer;

select (_n < 5) do list data hours h? ;


/*  -------------------------------------------------------------------

Now we should be ready to move values btw observations

 4. Looping over
     4a observations by taking values from other observations

-------------------------------------------------------------------- */
count ;
for i:= 2 to ($count) do
  begin
    if (age[i] = .)        then age[i]        := age[i-1] ;
    if (diagnosis[i] = .)  then diagnosis[i]  := diagnosis[i-1] ;
    if (procedures[i] = .) then procedures[i] := procedures[i-1] ;
  end;

  // in the last row we wish to have a . in the values:
  age[size(ds1)] := .     ;
  diagnosis[size(ds1)]   := .     ;
  procedures[size(ds1)]  := .     ;


/* test whether this went as expected. */
select (age = .) do count;
assert( $count = 1);

select (diagnosis = .) do count;
assert( $count = 1);

select (procedures = .) do count;
assert( $count = 1);

/*  -------------------------------------------------------------------

 4. Looping over

    4b observations for assignment of sequential values within observations

    In the file we will sort and then assign sequential number within

-------------------------------------------------------------------- */

// by the hours;
sort hours age;
drop var idh1 idh2 idh3;

// strategy 1: loop compare with previous observation
count;
new var idh1 i:= 1 !label:="id within hours - loop";
for i:= 2 to ($count -1) do
  if (hours[i] = hours[i-1]) then
       idh1[i] := idh1[i-1] + 1;

// strategy 2: loop and the iif function ?
new var idh2 i := 1 !label:="id within hours - iif, notice from obs 2";

// notice number of observations taken with the size function
for i:= 2 to (size(ds1) -1) do
   idh2[i] := iif(
                hours[i] = hours[i-1],  /* Test condition */
                idh2[i-1] +1,           /* same value     */
                1                       /* else           */
              );

// strategy 3: the iif function what happens with illegal _n ?
new var idh3 i:= 1 !label:="id within hours - iif, from obs 1";
idh3:= iif(
         hours[_n] = hours[_n-1], /* Test condition */
         idh3[_n-1] +1,           /* same value */
         1                        /* else       */
       );

for i := 1 to size( @{$dataset[1]} ) do
  begin
    assert ( idh1[i] = idh2[i] ) !q !halt;
    assert ( idh2[i] = idh3[i] ) !q !halt;
  end;


// extend principle and assign with subgroups and select:
drop var idh4 idh5;

// strategy 4: the iif function what happens with double criteria ?
sort age h2 ;
new var idh4 i := 0;

select h2 = 2 do
  idh4 := iif(
            (age[_n] = age[_n-1]),
            idh4[_n-1] +1,          /* same value */
            1                       /* else       */
          );

for i := 1 to size( @{$dataset[1]} ) do
  assert ((h2[i] <> 2) or ((h2[i] = 2) and (idh4[i] <> 0)) ) !q !halt;

select (_n < 10) do
  list data hours age h2 idh4;

/*  -------------------------------------------------------------------

 4. Looping over
         4c variables, constants and structures

-------------------------------------------------------------------- */

// testing if one may parse the name of variables within a loop and as the content
// of a global.

new global varname s;
for i := 1 to 12 do
  begin
    varname := "idh"+i;

    if exist(@{varname}) then
      ? "variable known: idh" + i
    else
      begin
        ? "variable not known: idh" + i ;
        new var @{varname} i := 1;
      end;

    assert (datatype(@{varname}) =  1);

    if (i > 4) then
      drop var @{varname};
  end;



// testing of parsing from one variable to another (making wide)
set "show info" := "OFF";

for i := 1 to 12 do
  begin
    varname := "proc"+i;
    drop var @{varname} ;
  end;

drop var proc;
new global j i := 0;
new global maxp i := 0;

new global obs i   ;
new var proc s := procedures + ",";
new var nproc i ;

for obs := 1 to size(ds1) do
// for obs := 1 to 10 do
  begin
   j := 0;
   for i := 1 to 7 do
   begin
     if (length(proc[obs]) > 1) then   /* move content to other variable   */
       begin
         j := j+1 ;
         if j > maxp then maxp := j;
         varname := "proc"+j;
         if not exist(@{varname}) then new var @{varname} s;

         @{varname}[obs] := substring(proc[obs],1,pos(proc[obs],",")-1);
         // ? @{varname}[obs] ;
         proc[obs] := substring(proc[obs],pos(proc[obs],",")+1,(length(proc[obs])- length(@{varname}[obs])-1));
       end;
   end;
   nproc[obs] := j;
   assert( length(proc[obs]) = 0 ) !q;
  end;

// set "show info" := "on";
? "Max number of procedures was: " + maxp;

// now use maxp to extend dataset

save "tempfile.epx" !replace    ;

/* now we wish to create a long dataset with each observation
   added the same number of times as the number of procedures
*/

new global filename s;
for i := 1 to maxp do
  begin
    read "tempfile.epx" !c !force;
    filename := "proc" + i + ".epx" ;
    select (nproc = i) do count;
    if $count > 0 then
      begin
        select (nproc <> i ) do drop data  ;
        ? "i= " + i + " file: " +filename + " Obs = " + size(ds1);
        // does  not work: save @{filename} !replace !force ;
        save filename !replace !force;
/*        if i = 1 then save "proc1.epx" !replace;
        if i = 2 then save "proc2.epx" !replace;
        if i = 3 then save "proc3.epx" !replace;
        if i = 4 then save "proc4.epx" !replace;
        if i = 5 then save "proc5.epx" !replace;
        if i = 6 then save "proc6.epx" !replace; */
      end;
   end;

// now append the desired number of times for each file

read "tempfile.epx" !c !force;
cls;

for i := 2 to maxp do    // 2: we already have obs with 1
  begin
    select (nproc = i) do count;
    if $count > 0 then
      begin
        filename := "proc" + i + ".epx" ;
        for j := 1 to (i-1) do
          begin
            // * does not work:*/ append !fn:=@{filename} ;
            if i = 2 then append !fn:="proc2.epx" ;
            if i = 3 then append !fn:="proc3.epx" ;
            if i = 4 then append !fn:="proc4.epx" ;
            if i = 5 then append !fn:="proc5.epx" ;
            if i = 6 then append !fn:="proc6.epx" ;
          end;
      end;
   end;

// now loop over each id and move procX to variable proc
new var n i := 1  !label:="Number within each id";

sort id age hours procedures     /* implicitly will the procX.... be order correctly */ ;


for obs := 1 to size(ds1) do
// for obs := 1 to 10 do
  begin
   for i := 2 to nproc[obs] do
   begin
     if (id[obs] <> id[obs-1])
       then n[obs]:= 1
       else n[obs]:= n[obs-1] +1;
   end;
  end;

// set "show info" := "on";

// set "show info" := "off";

// for obs := 1 to 20 do
for obs := 1 to size(ds1) do
   begin
     varname := "proc" + n[obs];
     // proc[obs] := @{("proc" + n[obs])}[obs]    ;
     proc[obs] := @{varname}[obs]  ;
   end;

set "show info" := "off";





