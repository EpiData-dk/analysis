object IntroductionForm: TIntroductionForm
  Left = 2234
  Height = 937
  Top = 158
  Width = 1097
  Caption = 'Introduction'
  ClientHeight = 937
  ClientWidth = 1097
  Position = poDefault
  LCLVersion = '1.9.0.0'
  object Memo1: TMemo
    Left = 0
    Height = 937
    Top = 0
    Width = 1097
    Align = alClient
    Font.CharSet = 4
    Font.Height = -13
    Font.Name = 'Monospace'
    Lines.Strings = (
      '==========================================='
      '= EpiData Analysis commands and structure ='
      '=========================================== '
      ''
      'EpiData Analysis is being restructured to accomodate:'
      '1. Support for more operating systems (Linux, Windows and Mac)'
      '2. To use the same core modules as Manager and EntryClient'
      '3. To allow for open source principles when finalized'
      ''
      '################################################'
      '## Main differences to EpiData Analysis for Windows in usage:'
      ''
      'Warning: do not YET use for real analysis only for testing '
      ''
      'Major highlights and differences at this point:  '
      ''
      '0 Many commands are not implemented yet'
      '1 Write := instead of =, when a variable gets a new value'
      '2 All linies in a pgm must end with ;   '
      '3 The select command is not accumulative, each select works ONLY on one "line" at a time'
      '4 The  new "begin .... end" construct can use the same select for several commands'
      '5 The command formulation is almost final - but could be changed '
      '6 New and Edit commands work on all structures (project, dataset, variable, global etc)'
      '   and with similar options and function.'
      '7 A copy of all executed commands is saved in a file (commandlog.pgm) '
      ''
      '################################################'
      '## Reading and saving data:'
      ''
      'read <filename[.ext]>;     // [.ext] indicates type [epx|dta|csv|rec]'
      'save <filename[.ext]>;     // [.ext] indicates type [epx|dta|csv]'
      'use dataset;    '#9'   // use a given dataset within a project. '
      'close;                     // close current project'
      #9#9#9#9
      ''
      '############################'
      'Not implemented yet:'
      '    close [all] ;  * only closes data unless option "all"'
      ''
      ''
      '################################################'
      '## See data or variables  abbreviation given in ()'
      'list data'#9'(list d)      # list data values and or value labels'
      'list var'#9'(list v)      # lists variables'
      'list dataset'#9'(list ds)     # lists datasets'
      'list valuelabel (list vl)     # lists valuelabels '
      'list results'#9'(list r)      # lists resultvariables '
      'list global'#9'(list g)      # lists global non-vector constants'
      ''
      ''
      ''
      '################################################'
      '## Analysis commands:'
      ''
      ''
      'means <varname> [!by := "<varname>"] [!t] [!v] [!vl] [!lv] [!l]'
      'freq <varname> '
      'count '
      ''
      ''
      '## use any command on a given subset (filtered selection) of data: '
      ''
      'select <boolean expression> do <command> ;'
      '   '
      ''
      '################################################'
      '## manage output'
      ' '
      'cls ;   * delete all output  '
      'clh ;   * empty history of pgm lines '
      ''
      '################################################'
      '## special commands for testing'
      ''
      'runtest "<directory>"'
      ''
      ''
      '################################################'
      '## create new projects datasets variabels or value labels '
      ''
      'new v{ar}    <name> <type> [ := <expression> ]    // <type> is one of i{nteger} f{loat} d{ate} s{tring} t{ime}'
      'new g{lobal} <name> <type> [ := <expression> ]'
      'new dataset  <name>'
      'new project'
      ''
      '<var>        := <expression>  // Assign a value to a variable or global'
      '<var>[index] := <expression>  // Assign a value to a single entry in variable or global vector'
      ''
      '? <expression>  # Evaluation command. Outputs the value of the expression. Eg.'
      #9#9'# ? 3 * 5     Outputs = 15'
      #9#9'# ? 3 < 5     Outputs "true"'
      ''
      'assert <boolean expression>  [!fail] [!halt]'
      'assert ( <command> )         [!fail] [!halt] '
      ''
      'set'
      'set "<set option name>"'
      'set "<set option name>" := <expression>'
      ''
      ''
      ''
      '## Statement constructs:'
      '########################'
      ''
      'begin'
      '  .... commands / statments ....'
      'end;'
      ''
      ''
      'if <boolean expression> then'
      '  ... command / statement / begin-end     # NOTE: there is no ";" after this statement if ELSE is used.'
      'else'
      '  ... command / statement / begin-end;'
      ''
      ''
      'select <boolean expression> do'
      '  ... command / statement / begin-end;    # All commands are executed on the filtered set of data.'
      ''
      'for <global> := <int expression> to/downto <int expression> do'
      '  ... command / statement / begin-end;    # This sets the <global> to the value of the first <int expression> and in-/decrements by 1'
      #9#9#9#9#9'    for each loop.'
      ''
      ''
    )
    ParentFont = False
    ScrollBars = ssAutoBoth
    TabOrder = 0
    WordWrap = False
  end
end
